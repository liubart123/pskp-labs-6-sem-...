[key]
openssl genrsa -des3 -out CA.key 2048

попросит ввести фразу (enter pass phrase for CA.key),
а также её подтвердить

//можно проверить ,будет ли он генерирвоать длину мньше



можно сразу же попытаться сгенерировать сертификат, но тогда будет просить ввести всю информаицю:
openssl req -x509 -new -key CA.key -days 700 -sha256 -out CA.crt

снвоа попросит ввести фразу лдя ключа (так как при генерации ключа исопльзовался -des3),
чтобы ег омонжо ыбоо использватт в связке с сертификатом
также прдётся ввести все данные (организацию, state, locality, ...)



[key]
ЕСЛИ ГЕНЕРИРОВАТЬ С ОПЦИЕЙ -des3, то потом со стороны express'а будет ндопонимание, так кк ключ был дополнительно зашифрован, поэтмоу будт вылетать соответствующая ошибка

если не использвать данную опцию, то тогда он и не будет просить ввести pass phrase



[req]
openssl req -new -key LAB.key -out LAB.csr -sha256 -config LAB.cfg

//в указанном .cfg хранятся state, locality name, organization, ...


[cert]
openssl x509 -req -in LAB.csr -CA CA.crt -CAkey CA.key -CAcreateserial -out LAB.crt -days 365 -sha256 -extensions v3_req -extfile LAB.cfg

v3_req - имя секции, в которой указаны расширениы для третьей версии (в данном случае нужны потому ,что используется DNS)






[old_hints]
--там нчиег оне написано про то, что домены должны быть заданы, поэтому можно только 1 домен оставить, атк что расширения не нужны, по идее
openssl x509 -signkey domain.key -in domain.csr -req -days 365 -out domain.crt


--req+key
openssl req –out certificatesigningrequest.csr -new -newkey rsa:2048 -nodes -keyout privatekey.key
--req from key
openssl req -out CSR.csr -key privateKey.key -new



//https://losst.ru/sozdanie-sertifikata-openssl


4. Создайте сертификат CA с CN = CA-LAB25-XYZ.

//данный сертификат будет в дальнейшем использовать Resource для того ,чтобы его импортировать в список доверенных сертификатов
//благодаря этому подписанный им сертификат для Resource будет подписан тому, кому уже доверяет
//поэтому его можно будет использовать в express без проблем с безопасностью


генерация приватного ключа CA:
openssl genrsa -des3 -out GAV.key 2048 

//попросит ввести pass phrase

//при создании данного сертификата создавать запрос не надо будет:

генерация сертификата CA:
openssl req -x509 -new -key GAV.key -days 365 -sha256 -out GAV.crt

если дополнитеьлно указать "-config GAV.cfg",
то будет генерировать первую версию, но при этом не надо будет ничего вводить
если не указать, то придётся вводить, но будет v3

//поменял GAV.cfg, добавив в него разделы из стандартного файла, котороый начинается с
#
# OpenSSL example configuration file.
# This is mostly being used for generation of certificate requests.
#

//после изменений congig'а нормально работает генерация с получением информации из файла и одновременно v3

//снова попросит из-за зашифрованного ключа ввести pass phrase


# не так надо (запрос не нужен, можно сразу по ключу сгенерировать)
# //если сделать так, то будет проблема:
# //версия будет 3, но при этом не будет ни одного расширения, так как он не знает, где их искать
# openssl x509 -req -days 365 -in GAV.csr -signkey GAV.key -out GAV.crt -extfile GAV.cfg 
# //поэтому надо указать секцию с ними
# openssl x509 -req -days 365 -in GAV.csr -signkey GAV.key -out GAV.crt -extensions v3_req -extfile GAV.cfg



5. Получите от Resource запрос на генерацию сертификата.

//для формирования запроса Resource должен выполнить следующие шаги
//(эти подготовительные действия выполняют указанное задание):
8. Сгенерируйте запрос на сертификат к CA с CN = RS-LAB25- ABC и передайте его CA для генерации сертификата.

генерация приватного ключа ресурса
openssl genrsa -out LLH.key 2048 

openssl req -new -key LLH.key -out LLH.csr -sha256 -config LLH.cfg

//можно посмотреть информаицю о сгенерированном запросе (внутри него будут открытый ключ и данные из .cfg)
openssl req -text -noout -verify -in LLH.csr

//Resource должен передать req и config (для удобства генерации, так как из него достанет [alt_names], а остальные строки из нго уже будут записаны в request'е)


6. Сгенерируйте сертификат для Resource по заданному им запросу. Разрешите доступ к следующим доменам: LAB25-ABC и ABC 

//домены из файла .cfg, но обязательно надо указать секцию, так как иначе не добавит в расширения (несмотря на то, что версия станет v3)

# не та команда (здесь ключ для подписи (-signkey), а нужен -CAkey)
# openssl x509 -req -days 365 -in LLH.csr -signkey GAV.key -out LLH.crt -extensions v3_req -extfile LLH.cfg
#здесь нормальные флаги (сертификат издателя и его закрытый ключ)
openssl x509 -req -in LLH.csr -CA GAV.crt -CAkey GAV.key -CAcreateserial -out LLH.crt -days 365 -sha256 -extensions v3_req -extfile LLH.cfg

//снова будет просить ввести pass phrase из-за обращения к GAV.key

//одновременно выполняемые пункты
7. Передайте Resource сгенерированный сертификат и свой CA- сертификат.
9. Получите от СА два сертификата.

//CA-сертификат будет предназначен для того, чтобы подтвердить валидность Resource сертификата


10. Импортируйте СА-сертификат в хранилище сертификатов (доверенные центры сертификации).

//после этого любой сертификат, который был подписан его ключом станет валидным

здесь рчь идёт о сертификате, который был назван GAV.crt
открыть, добавить в хранилище -> локальный компьютер -> выбрать хранилище (доверенные корневые центры сертификации)


11. Разработайте приложение 25-01, которое принимает GET-запросы по https-протоколу. Тестирование выполните с помощью браузера.

//при https.createServer({key: ..., cert: ...}) приходится передавать ещё и ключ
//(данный ключ уже использовался для генерации запроса на сертификат)

после этоого нужно добавить в файл hosts те имена, которые были указаны в config'е сертификата Resource в [alt_names]

в случае с LLH.crt:
127.0.0.1 LAB25-LLH
127.0.0.1 LLH

